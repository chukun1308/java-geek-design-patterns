迪米特法则的英文翻译是：
  Law of Demeter，缩写是 LOD。单从这个名字上来看，我们完全猜不出这个原则讲的是什么。
  不过，它还有另外一个更加达意的名字，叫作最小知识原则，英文翻译为：The Least Knowledge Principle。


关于这个设计原则，我们先来看一下它最原汁原味的英文定义：

  Each unit should have only limited knowledge about other units:
  only units “closely” related to the current unit.
  Or: Each unit should only talk to its friends; Don’t talk to strangers.

把它直译成中文，就是下面这个样子:
  每个模块（unit）只应该了解那些与它关系密切的模块
  （units: only units “closely” related to the current unit）的有限知识（knowledge）。
  或者说，每个模块只和自己的朋友“说话”（talk），不和陌生人“说话”（talk）。


什么是“高内聚”呢？
所谓高内聚，就是指相近的功能应该放到同一个类中，不相近的功能不要放到同一个类中。
相近的功能往往会被同时修改，放到同一个类中，修改会比较集中，代码容易维护。
实际上，我们前面讲过的单一职责原则是实现代码高内聚非常有效的设计原则。

什么是“松耦合”？
所谓松耦合是说，在代码中，类与类之间的依赖关系简单清晰。
即使两个类有依赖关系，一个类的代码改动不会或者很少导致依赖类的代码改动。
实际上，依赖注入、接口隔离、基于接口而非实现编程，以及迪米特法则，都是为了实现代码的松耦合。